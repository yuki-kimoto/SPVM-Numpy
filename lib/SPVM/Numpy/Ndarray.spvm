class Numpy::Ndarray {
  use Numpy::Constant::Dtype as DTYPE;
  use Numpy::Constant::Order as ORDER;
  use Numpy::Util;
  
  has T : rw byte;
  has data : mutable string;
  has dtype : byte;
  has shape : ro int[];
  
  has flags_C_CONTIGUOUS : ro byte;
  has flags_F_CONTIGUOUS : ro byte;
  has flags_OWNDATA : ro byte;
  has flags_WRITEABLE : ro byte;
  has flags_ALIGNED : ro byte;
  has flags_FNC : ro byte;
  has flags_FORC : ro byte;
  has flags_BEHAVED : ro byte;
  has flags_CARRAY : ro byte;
  has flags_FARRAY : ro byte;

  static method new_zeros : Numpy::Ndarray ($shape : int[], $dtype = -1 : byte) {
    
    if ($dtype == -1) {
      $dtype = DTYPE->FLOAT64;
    }
    
    my $nbytes = Numpy::Util->calc_ndarray_nbytes($shape, $dtype);
    
    my $data = (mutable string)new_string_len $nbytes;
    
    my $self = new Numpy::Ndarray;
    $self->{dtype} = $dtype;
    $self->{data} = $data;
    
    return $self;
  }

  static method new_zeros_like : Numpy::Ndarray ($a : Numpy::Ndarray) {
    
    my $shape = $a->{shape};
    my $dtype = $a->{dtype};
    
    my $new_zeros = &new_zeros($shape, $dtype);
    
    return $new_zeros;
  }

=pod

  method ndim : Numpy::Ndarray () {
    my $shape = $self->{shape};
    
    my $ndim = &calc_ndim($shape);
    
    return $ndim;
  }

  method strides : Numpy::Ndarray () {
    my $shape = $self->{shape};
    
    my $strides = &calc_strides($shape);
    
    return $strides;
  }

  method len : Numpy::Ndarray () {
    my $shape = $self->{shape};
    
    my $len = $shape->[0];
    
    return $len;
  }

  method flat : Numpy::Ndarray () {
    my $shape = $self->{shape};
    
    my $len = $shape->[0];
    
    return $len;
  }

  method real : Numpy::Ndarray () {
    my $shape = $self->{shape};
    
    my $len = $shape->[0];
    
    return $len;
  }

  method imag : Numpy::Ndarray () {
    my $shape = $self->{shape};
    
    my $len = $shape->[0];
    
    return $len;
  }

  method itemsize : Numpy::Ndarray () {
    my $dtype = $self->{dtype};
    
    my $itemsize = &calc_itemsize($dtype);
    
    return $itemsize;
  }

  method nbytes : Numpy::Ndarray () {
    my $nbytes = $self->{dtype};
    
    my $itemsize = &calc_itemsize($dtype);
    my $size = &calc_size($dtype);
    
    my $nbytes = $itemsize * $size;
    
    return $nbytes;
  }

  method strides : Numpy::Ndarray () {
    my $shape = $self->{shape};
    
    my $itemsize = &calc_itemsize($dtype);
    
    my $ndim = @$shape;
    
    my $strides = new int[$ndim];
    
    for (my $i = 0; $i < $ndim; $i++) {
      $strides->[$i] = $shape->[$i] * $itemsize;
    }
    
    return $strides;
  }

=cut

}
